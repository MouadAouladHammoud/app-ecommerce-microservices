server:
  port: 8070

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/order?createDatabaseIfNotExist=true&useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
    username: root
    password:
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    database: MYSQL
    show-sql: false
    hibernate:
      ddl-auto: update
      properties:
        hibernate:
          dialect: org.hibernate.dialect.MySQL5Dialect

  kafka:
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.type.mapping: orderConfirmation:com.mouad.ecommerce.kafka.OrderConfirmation
        # "com.mouad.ecommerce.kafka.OrderConfirmation" => app-ecommerce-microservices\services\order\src\main\java\com\mouad\ecommerce\kafka\OrderConfirmation.java
        # NB: "orderConfirmation" ne concerne pas un fichier. Dans le contexte de la configuration Spring Kafka, "paymentConfirmation" est simplement une chaîne de caractères utilisée comme un identifiant de type pour les messages JSON:
        #  {
        #   "type": "orderConfirmation",
        #   "data": {
        #     "orderReference": "12345",
        #     "amount": 300,
        #     ...
        #  }


# on peut utiliser les ports des microservices appropriés au lieu du port du service "gateway" si vous voulez que le microservice order communique directement avec les autres microservices.
#   Cependant, utiliser le service "gateway" présente plusieurs avantages, tels que la gestion centralisée des routes, l'équilibrage de charge, et les mécanismes de sécurité.


# 1. Utilisation du Service Gateway
# **** Avantages **** :
# - Centralisation : Toutes les routes et configurations sont centralisées dans le "gateway".
# - Sécurité : Le "gateway" peut gérer l'authentification et l'autorisation (en utilisant "Keycloak" avec "gateway").
# - Equilibrage de Charge (Load Balancer) : Le "gateway" peut distribuer les requêtes entre plusieurs instances d'un microservice.
# - Facilité de gestion : Les modifications de routes ou d'URL peuvent être faites dans un seul endroit.
application:
  config:
    customer-url: http://localhost:8222/api/v1/customers
    payment-url: http://localhost:8222/api/v1/payments
    product-url: http://localhost:8222/api/v1/products


# 2. Communication Directe avec les Microservices
# **** Avantages **** :
# - Performance : Communication plus rapide sans le routage supplémentaire via le gateway.
# **** Inconvénients **** :
# - Gestion Décentralisée : Chaque microservice doit gérer ses propres routes et configurations.
# - Sécurité : Chaque microservice doit gérer individuellement l'authentification et l'autorisation.
# application:
  # config:
    # customer-url: http://localhost:8090/api/v1/customers
    # payment-url: http://localhost:8060/api/v1/payments
    # product-url: http://localhost:8050/api/v1/products